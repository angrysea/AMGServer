#pragma once
// Title:        GetNamedCacheResponse
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  C:\projects\adaptinet\InstrumentCache\schema\Synthesis.xsd
// C++ SDK:     

#include <string>
#include <vector>
#include "..\entityobjects\ValueObject.h"
#include "..\entityobjects\DataArray.h"
#include "..\entityobjects\DataItem.h"

using namespace std;
class CacheEntry : public ValueObject
{
public:
	const int & getkey() const
	{
		return _key;
	}
	void setkey(const int & newValue)
	{
		_key = newValue;
	}
	const string & getvalue() const
	{
		return _value;
	}
	void setvalue(const string & newValue)
	{
		_value = newValue;
	}
	const string & gettype() const
	{
		return _type;
	}
	void settype(const string & newValue)
	{
		_type = newValue;
	}
	const string & getdescription() const
	{
		return _description;
	}
	void setdescription(const string & newValue)
	{
		_description = newValue;
	}
	const int & getlocation() const
	{
		return _location;
	}
	void setlocation(const int & newValue)
	{
		_location = newValue;
	}
	DATAARRAY * write()
	{
		int sa_idx = 0;
		DATAARRAY * da = DataArray(DATATYPEENUM::DT_DATAITEM, 5);
		item.intVal = _key;
		DataArrayPutElement(da, sa_idx++, &item);
		item.sstringVal = SafeString(_value.c_str());
		DataArrayPutElement(da, sa_idx++, &item);
		item.sstringVal = SafeString(_type.c_str());
		DataArrayPutElement(da, sa_idx++, &item);
		item.sstringVal = SafeString(_description.c_str());
		DataArrayPutElement(da, sa_idx++, &item);
		item.intVal = _location;
		DataArrayPutElement(da, sa_idx++, &item);
		DataItemClear(&item);
		return da;
	}
	void read(DATAARRAY * in)
	{
		int sa_idx = 0;
		DataArrayGetElement(in, sa_idx++, &item);
		_key = item.intVal;
		DataArrayGetElement(in, sa_idx++, &item);
		_value = item.sstringVal;
		DataArrayGetElement(in, sa_idx++, &item);
		_type = item.sstringVal;
		DataArrayGetElement(in, sa_idx++, &item);
		_description = item.sstringVal;
		DataArrayGetElement(in, sa_idx++, &item);
		_location = item.intVal;
	}
	int _key;
	string _value;
	string _type;
	string _description;
	int _location;
	DATAITEM item;
};

class NamedCache : public ValueObject
{
public:
	int getentryCount()
	{
		return _entryCount;
	}
	std::vector<CacheEntry> getentryArray()
	{
		return _entry;
	}
	void setentryArray(const std::vector<CacheEntry> & newValue)
	{
		_entry = newValue;
	}
	std::vector<CacheEntry>::iterator getentryIterator()
	{
		_entry.end();
	}
	CacheEntry getentry(int idx)
	{
		return _entry[idx];
	}
	void setentry(CacheEntry newValue)
	{
		_entry.push_back(newValue);
	}

	const string & getname() const
	{
		return _name;
	}
	void setname(const string & newValue)
	{
		_name = newValue;
	}
	DATAARRAY * write()
	{
		int sa_idx = 0;
		DATAARRAY * da = DataArray(DATATYPEENUM::DT_DATAITEM, 2);
		if (_entry.size()>0) 
		{
			DATAARRAY * daChild = DataArray(DATATYPEENUM::DT_ARRAY, _entry.size());
			for (int __I_A = 0; __I_A<_entry.size(); __I_A++) 
			{
				DataArrayPutElement(daChild, __I_A, &_entry[__I_A]);
			}
			item.parray= daChild;
		}
		else 
		{
			DataItemClear(&item);
		}
		DataArrayPutElement(da, sa_idx++, &item);
		item.sstringVal = SafeString(_name.c_str());
		DataArrayPutElement(da, sa_idx++, &item);
		DataItemClear(&item);
		return da;
	}
	void read(DATAARRAY * in)
	{
		int sa_idx = 0;
		DATAARRAY daItem;
		DATAARRAY daElement
			in.getDataItem(sa_idx++, item);
		item.getDataArray(daItem);
		_entryCount = daItem.getElements();
		if (_entryCount>0) {
			_entry = new CacheEntry[_entryCount];
			for (int __I_A = 0; __I_A<_entryCount; __I_A++) {
				_entry[__I_A] = new CacheEntry();
				daItem.getDataArray(__I_A, daElement);
				_entry[__I_A].readCache(daElement);
			}
		}
		DataArrayGetElement(in, sa_idx++, &item);
		_name = item.sstringVal;
	}
private:
	std::vector<CacheEntry> _entry;
	int _entryCount = 0;
	string _name;
	DATAITEM item;
};

