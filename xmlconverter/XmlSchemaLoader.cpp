#include <string>
#include <algorithm>
#include <istream>
#include <fstream>
#include <direct.h>
#include "dirent.h"

#include "XmlSchemaLoader.h"
#include "XsdSchemaLoader.h"

bool XmlSchemaLoader::bObjectAccessors = false;
std::string XmlSchemaLoader::XSDSCHEMA = "http://www.w3.org/1999/XMLSchema";
std::string XmlSchemaLoaderDEFAULT_PARSER_NAME = "com.db.xmltools.parser.XMLReader";

void XmlSchemaLoader::xmlLoad(XsdSchemaLoader & loader, std::istream * is)
{
	try
	{
		is->seekg(0, std::ios::end);
		std::string buffer;
		buffer.resize(is->tellg());
		is->seekg(0, std::ios::beg);
		is->read(&buffer[0], buffer.size());
		loader.xmlLoad(buffer);
	}
	catch (std::exception e)
	{
		std::cout << e.what();
	}
}

void makeProjectDir(const std::string & sPath)
{
	DIR * pDir = opendir(sPath.c_str());

	if (pDir != NULL)
	{
		closedir(pDir);
	}
	else
	{

		int errorcode = _mkdir(sPath.c_str());
		if (errorcode != 0)
		{
			int end = sPath.find_last_of("/\\");
			makeProjectDir(sPath.substr(0, end));
			_mkdir(sPath.c_str());
		}
	}
}

void XmlSchemaLoader::generateClasses(const std::string & filePath,
	const std::string & schemaFileName, bool cacheable)
{
	try
	{
		std::fstream fs;
		makeProjectDir(filePath);

		XsdSchemaLoader loader;
		std::fstream schemaFile;
		schemaFile.open(schemaFileName, std::ios::in);
		if (schemaFile)
		{
			xmlLoad(loader, &schemaFile);
			std::map<const std::string, std::shared_ptr<ElementType>> & elementTypes = loader.getElementTypes();
			for (auto & p : elementTypes)
			{
				auto & e = p.second;
				std::string classData = e->generateCode(cacheable);
				if (classData.empty())
				{
					break;
				}

				int start = classData.find("class ");
				start += 6;
				int end = classData.find(" ", start + 1);
				if (end == std::string::npos)
				{
					end = classData.find("\n", start + 1);
				}
				std::string className = classData.substr(start, end - start);

				std::string fileName = filePath + className + ".h";
				std::fstream source;
				source.open(fileName, std::ios::out);

				source << "#pragma once" << std::endl;
				source << "// Title:        " << className << std::endl;
				source << "// Author:       Generate code" << std::endl;
				source << "// Company:      " << std::endl;
				source << "// Description:  This class was generated by the XML-Broker Developer Console"
					<< std::endl;
				source << "// Schema name:  " << schemaFileName << std::endl;
				source << "// C++ SDK:     " << std::endl << std::endl;

				source << classData;
				source << std::endl;
				source.flush();
				source.close();
			}
		}
	}
	catch (std::exception e)
	{
		std::cout << e.what() << std::endl;
		std::string errorMsg;
		errorMsg.append("Error: [");
		errorMsg.append(e.what());
		errorMsg.append("] occurred while processing the schema.  Aborted.\n");
		throw new std::exception(errorMsg.c_str());
	}
}
